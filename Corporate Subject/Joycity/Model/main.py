# -*- coding: utf-8 -*-
"""게임 마케팅 지표 기반 퍼블리싱 기획서

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wOYVyQyBJR1qqqc_d5YCDR15DEt5lTZ9

# 목적
유저 데이터, 매출, 마케팅 비용 데이터를 통해 게임을 분석하고
최근 성과, 향후 가능성을 바탕으로 상대적으로 우수한 수치값을 지닌 게임을 선정하여 런칭 제시  

# 방법론
지표 기반 평가법

# 진행 process
1. 기본적으로 제공받은 변수를 바탕으로
게임 자체의 robust를 판단할 new variable들을 생성할 것입니다.

2. 상관분석, 선형회귀분석을 실시하여 source -> target 인과관계 확인

# 중점적으로 확인하고자 하는 부분
1. 가입자 대비 신규,복귀,기존 유저들의 실제 활성 유저 전환 / 이탈 비율 확인

2. 마케팅 투자 비용 대비 가입자수의 변화 여부 확인

3. 구매전환율의 등락이 결과적으로 매출 상승에 영향을 미치는지 확인
"""

import pandas as pd
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt
from scipy.stats import t
from statsmodels.formula.api import ols
from statsmodels.stats.anova import anova_lm
from statsmodels.sandbox.stats.multicomp import MultiComparison
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm

game_a = pd.read_csv("/content/game_A.csv",encoding="cp949")
game_b = pd.read_csv("/content/game_B.csv",encoding="cp949")
game_c = pd.read_csv("/content/game_C.csv",encoding="cp949")

class Gameanalysis:

  def __init__(self,game):

    self.game = game # arg : df(pd.dataframe)

    # 수치형 데이터 타입 변환

    self.game["가입자수"] = self.game["가입자수"].astype(int)
    self.game["접속자수(가입자중)"] = self.game["접속자수(가입자중)"].astype(int)
    self.game["접속자수(전체)"] = self.game["접속자수(전체)"].astype(int)
    self.game["PU"] = self.game["PU"].astype(int)
    self.game["매출(신규+기존)"] = self.game["매출(신규+기존)"].astype(float)
    self.game["마케팅비용"] = self.game["마케팅비용"].astype(float)

    # 기존 변수 이름변환
    self.game = self.game.rename(columns={"접속자수(가입자중)":"접속자수_가입자기준","접속자수(전체)":"접속자수_전체"})

    # 유저 행동 / 수익 지표 신규 구축(* Acquisition 단계 제외 , 사유 : 기존 보유)

    # activation
    self.game["가입자기준_신규복귀유저_비율"] = self.game["접속자수_가입자기준"] / self.game["가입자수"] # RU의 실제 활성 유저비율
    self.game["가입자기준_신규복귀유저_이탈률"] = 1 - self.game["가입자기준_신규복귀유저_비율"] # bounce rate (이탈률)
    self.game["접속자기준_신규복귀유저_비율"] = self.game["접속자수_가입자기준"] / self.game["접속자수_전체"] # 전체 기준 신규/복귀 활성 유저비율 (RU / AU)
    self.game["접속자기준_기존유저비율"] = 1 - self.game["접속자기준_신규복귀유저_비율"] # 전체 기준 기존 활성 유저비율
    self.game["UAC"] = self.game["마케팅비용"] / self.game["가입자수"] # UAC : 유저 1명 확보하기 위해 지출한 마케팅비용

    # Revenue
    self.game["구매전환비율"] = self.game["PU"] / self.game["접속자수_전체"] # PU rate (전체 유저 구매비율)
    self.game["유저1인당평균매출"]  = self.game["매출(신규+기존)"] / self.game["접속자수_전체"] # Daily ARPU : 유저 1인당 하루 평균 매출

    # 신규 지표 수치형 타입 변환
    self.game["가입자기준_신규복귀유저_비율"] = self.game["가입자기준_신규복귀유저_비율"].astype(float)
    self.game["가입자기준_신규복귀유저_이탈률"] = self.game["가입자기준_신규복귀유저_이탈률"].astype(float)
    self.game["접속자기준_신규복귀유저_비율"] = self.game["접속자기준_신규복귀유저_비율"].astype(float)
    self.game["접속자기준_기존유저비율"] = self.game["접속자기준_기존유저비율"].astype(float)
    self.game["UAC"] = self.game["UAC"].astype(int)
    self.game["구매전환비율"] = self.game["구매전환비율"].astype(float)
    self.game["유저1인당평균매출"] = self.game["유저1인당평균매출"].astype(int)

  def _execute(self):
    return self.game

  def _corr(self):
    return self.game.corr()

  def _user_acq_cost_to_reg_user(self):

    """ 유저 1명 확보를 위해 지출한 마케팅 비용 대비 가입자수 증감여부 분석"""

    X = self.game[["UAC"]]
    Y = self.game["가입자수"]

    # 상수항 벡터 결합
    X = sm.add_constant(X)

    # OLS(최소자승법) 회귀분석 -> rss(잔차제곱합) 최소화 (최적 : gradient=0)
    model = sm.OLS(Y, X)
    results = model.fit()

    # 회귀분석 결과 출력
    return print(results.summary())

  def _visual_uac_ru(self):

    """ 유저 1명 확보를 위해 지출한 마케팅 비용 대비 가입자수 증감여부 시각화"""

    x = self.game[["UAC"]]
    y = self.game['가입자수']

    # 회귀모델 적합
    model = LinearRegression()
    model.fit(x, y)

    plt.figure(figsize=(5,3))
    y_pred = model.predict(x)

    plt.scatter(x,y,alpha=0.5)
    plt.plot(x,y_pred,color="r")
    plt.title("visualization")
    plt.xlabel("UAC")
    plt.ylabel("가입자수")
    plt.grid()
    plt.legend("acq_cost","reg_user",loc="lower right")

    return plt.show()

  def _conversion_rate_to_sales(self):

    """ 구매전환비율에 따른 매출 증감여부 분석"""

    X = self.game[["구매전환비율"]]
    Y = self.game["매출(신규+기존)"]

    # 상수항 벡터 결합
    X = sm.add_constant(X)

    # OLS(최소자승법) 회귀분석 -> rss(잔차제곱합) 최소화 (최적 : gradient=0)
    model = sm.OLS(Y, X)
    results = model.fit()

    # 회귀분석 결과 출력
    return print(results.summary())

  def _visual_conversion_rate_sales(self):

    """ 구매전환비율에 따른 매출 증감여부 시각화"""

    x = self.game[["구매전환비율"]]
    y = self.game['매출(신규+기존)']

    # 회귀모델 적합
    model = LinearRegression()
    model.fit(x, y)

    plt.figure(figsize=(5,3))
    y_pred = model.predict(x)

    plt.scatter(x,y,alpha=0.5)
    plt.plot(x,y_pred,color="r")
    plt.title("visualization")
    plt.xlabel("구매전환비율")
    plt.ylabel("매출(신규+기존)")
    plt.grid()
    plt.legend("conversion_rate","total_sales",loc="lower right")

    return plt.show()

  def _uac_to_sales(self):

    """ 유저 1명 확보하기 위해 지출한 마케팅 비용 여부에 따른 매출 증감여부 분석"""

    X = self.game[["UAC"]]
    Y = self.game["매출(신규+기존)"]

    # 상수항 벡터 결합
    X = sm.add_constant(X)

    # OLS(최소자승법) 회귀분석 -> rss(잔차제곱합) 최소화 (최적 : gradient=0)
    model = sm.OLS(Y, X)
    results = model.fit()

    # 회귀분석 결과 출력
    return print(results.summary())

  def _visual_uac_sales(self):

    """ 유저 1명 확보하기 위해 지출한 마케팅 비용 여부에 따른 매출 증감여부 시각화"""

    x = self.game[["UAC"]]
    y = self.game['매출(신규+기존)']

    # 회귀모델 적합
    model = LinearRegression()
    model.fit(x, y)

    plt.figure(figsize=(5,3))
    y_pred = model.predict(x)

    plt.scatter(x,y,alpha=0.5)
    plt.plot(x,y_pred,color="r")
    plt.title("visualization")
    plt.xlabel("UAC")
    plt.ylabel("매출(신규+기존)")
    plt.grid()
    plt.legend("acq_cost","total_sales",loc="lower right")

    return plt.show()

"""# Game A 특징

1. 신규/복귀 활성 유저 비율이 3게임 중 2번째로 낮고 신규/복귀 유저의 이탈률이 높다.
-> **신규유입이 안된다는 의미**

    활성 유저 전환 비율 18 ~ 25% 초기 이탈률 75 ~ 82%

    그러나 기존유저 비율 수치는 지속적으로 증가


2. 유저 확보를 위해 투자하는 마케팅 비용 대비 가입자 수가 상승하지 않는다.


    선형회귀분석 결과 강한 음의 선형관계, 결정계수 값 0.87
    
    오히려 가입자 수가 하락하는 추세 , 가입자 수 대비 활성 유저 또한 지속적으로 하락


3. 전체구매전환 비율, 유저1인당 평균매출의 상승부진

    -> 해당 게임_a의 매출 대부분은 기존 유저 기반으로 수익 창출
    * 구매전환비율 : 3.5 ~ 5 % 범위 , 1인당 평균매출 : 9000 ~ 15000
    * 구매전환비율 대비 총매출 상승 직결에 대해 설명하기에 결정계수 값이 매우 낮음(y, y' 간 error가 너무큼)
"""

# Game A : MMORPG
first_game = Gameanalysis(game_a)
first_game._execute()

# focus 1. 유저 행동,매출 지표 기반 게임 성과 및 향후 가능성 판단 기준
first_game._execute().iloc[:,7:]

# game_a 각 변수 간 상관관계 분석
first_game._corr()

# focus 2
first_game._user_acq_cost_to_reg_user()

first_game._visual_uac_ru()

# focus 3
first_game._conversion_rate_to_sales()

first_game._visual_conversion_rate_sales()

first_game._uac_to_sales()

first_game._visual_uac_sales()

"""
# GAME B 특징
1. 신규/복귀 활성 유저 비율이 3게임 중 가장 낮고 신규/복귀 유저의 이탈 비율이 높다.
  * 가입자 수 대비 신규 복귀 활성 유저 14% 이탈률 86%

  -> 그러나, Game B는 가입자 수 고정 수치 꾸준히 상승
  -> 가입자 수 대비 전환 유저 수치 또한 지속적인 상승 추세.

2. 유저 1명을 확보하기 위한 마케팅 비용 지출이 줄어들면 가입자수도 줄어든다.


    상관계수 -0.93 , 결정계수 0.883, 선형회귀분석 모델이 이를 뒷받침합니다.

2-1 유저 1명을 확보하기 위한 마케팅 비용 투자액이 증가할 경우 총매출이 상승한다.
    
    
    선형귀분석 모델이 이를 뒷받침 (상관계수 0.97, 결정계수 0.943)

    
3. 기존유저 비율 수치가 높다.
   
4. 상대적으로 3게임 중 전체 구매전환율이 가장 높은 편
    - 구매전환율 : 7.5~ 10.77 %

    그러나 전체 구매전환율이 결과적으로 총매출 상승에 관련 없음
    결정계수 0.058, 상관계수 -0.24"""

# Game B : 전략 시뮬레이션
second_game = Gameanalysis(game_b)
second_game._execute()

# focus 1 : 유저 행동,매출 지표 기반 게임 성과 및 향후 가능성 판단 기준
second_game._execute().iloc[:,7:]

# game_b 각 변수 간 상관관계 분석
second_game._corr()

# focus 2
second_game._user_acq_cost_to_reg_user()

# 선형회귀분석 시각화
second_game._visual_uac_ru()

# focus 3
second_game._conversion_rate_to_sales()

second_game._visual_conversion_rate_sales()

second_game._uac_to_sales()

second_game._visual_uac_sales()

"""# Game C 특징

1. 가입자 수의 최소 58% 이상이 활성 유저로 전환되는 아주 큰 장점을 지닌 게임
    
    
    게임 특성 상 조작법이 어렵지 않고, 진입장벽이 낮기 때문에 가능한 것으로 판단


2. 가입자 수 확보를 위해 사용되는 마케팅 비용이 증가하는데, 가입자수 감소
    
    
    마케팅 대상, 마케팅 방식 등 마케팅 전략 재점검 필요성 대두
    잘못된 전략으로 쓸데없는 비용 낭비는 막아야 할 것으로 보임

3. 신규,복귀유저와 더불어 기존 유저까지 지속적으로 줄어들고 있다    
    
    3-1. 가입자 수 지속적으로 감소
    
    3-2. Paying User의 지속적인 감소
    
결론 : 마케팅 전략을 전면 수정하여, 가입유저 및 기존유저 이탈에 방지해야 함
"""

# Game C : puzzle 게임
third_game = Gameanalysis(game_c)
third_game._execute()

# focus 1 : 유저 행동,매출 지표 기반 게임 성과 및 향후 가능성 판단 기준
third_game._execute().iloc[:,7:]

# game_c 각 변수 간 상관관계 분석
third_game._corr()

# focus 2
third_game._user_acq_cost_to_reg_user()

third_game._visual_uac_ru()

# focus 3
third_game._conversion_rate_to_sales()

third_game._visual_conversion_rate_sales()

third_game._uac_to_sales()

third_game._visual_uac_sales()

x = second_game._execute().iloc[:,1]
y = second_game._execute().iloc[:,2]
plt.figure(figsize=(5,3))
plt.plot(x,color="red")
plt.plot(y,color="green")
plt.xlabel("date")
plt.ylabel("user")
plt.grid()
plt.legend(["reg_user","active_user"],loc=(0.66,0.4))
plt.show()



